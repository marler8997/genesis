#!/usr/bin/env python3
import os
import sys
import shutil
import json
import glob

script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(script_dir, "py"))

import log
import util
import download
import genesis
import genobjset
import genesispkgslib

def load_packages():
    if os.path.exists("genesispkgs.py"):
        pkg_globals = {
            'os':os,
            'sys':sys,
            'config':genesispkgslib.Config(),
            'obj_set':genobjset.GenObjSet(),
            'select':genesispkgslib.select,
            'kwselect':genesispkgslib.kwselect,
            'make_rpath':genesispkgslib.make_rpath,
            'make_rpath2':genesispkgslib.make_rpath2,
        }
        def include_file(path):
            filename = util.fix_path_sep(path)
            with open(filename, "r") as file:
                code = compile(file.read(), filename, 'exec')
                exec(code, pkg_globals, {})
        pkg_globals['include_file'] = include_file
        with open("genesispkgs.py", "r") as file:
            code = compile(file.read(), "genesispkgs.py", 'exec')
            exec(code, pkg_globals, {})
        return pkg_globals['obj_set']
    return None

def make_local_obj_filename(gen_obj):
    return os.path.join("o", genesis.make_hash_name(gen_obj.get_hash(), gen_obj.name))

def generate_local_obj_files(obj_set):
    log.mkdirs_if_needed("o")
    basename_set = {}
    for _,gen_obj in obj_set.hash_name_map.items():
        filename = make_local_obj_filename(gen_obj)
        basename_set[os.path.basename(filename)] = True
        if os.path.exists(filename):
            log.verbose("{} (already exists)".format(filename))
        else:
            tmp = filename + ".tmp"
            with open(tmp, "w") as file:
                file.write(gen_obj.get_hashdata())
            log.rename(tmp, filename)
            log.log("{} (created)".format(filename))
    for entry_base in os.listdir("o"):
        if not entry_base in basename_set:
            entry = os.path.join("o", entry_base)
            log.log("{} (removed)".format(entry))
            os.remove(entry)

def usage():
    print('''Usage: gen COMMAND ARGS..."

Common Commands:
  list                          List packages
  add-build <packages>...       Equivalent of 'gen add <packages>...' and 'gen build <gen-files>...'
  make-env <packages>...        Make an environment with a set of packages
Less-Common Commands:
  add-build-obj <gen-files>...  Equivalent of 'gen add-obj <files>...' and 'gen build <gen-files>...'
  make-env-obj <obj-files>...   Make an enviroment with a set of object files
  add-obj <gen-files>...        Add the given gen files and their dependencies into the store.
  build <gen-file-store-path>   Build the given genesis file path.  The path must be a path in the store.
  store <path>                  Install a file/directory into the store. The resulting path will be of the form
                                /g/ca/<hash>-<basename>
                                Guaranteed to only print the resulting store path to stdout, nothing else.
  store-hashed <path>           Install a file/directory into the store whose name already contains it's hash.
  hash <path>                   Hash a file/directory.
  dump-hash-data <gen-file>     Dump the hash data for a generation object from the given file.
  out-hash <gen-file>           Equivalent of ./gen dump-hash-data <gen-file> | ./gen hash -
  get-obj-local-path <name>     Get the local genesis object file for the given name
  generate-obj-files            Generate the locla object files
  show <package-name>           Show the object-file definition of a package
Network Commands:
  net-show                      Show the network settings.
                                These settings should be taken from the system, but also
                                should be overridable somehow.
Management Commands:
  setup-store                   Setup the store directory structure
  clean                         Clean stage directories, tmpouts and extracting directories
  clean-stage                   Clean all leftover stage directories
Options:
  --verbose                     Verbose output
  --keep-stage                  Keep stage directories
''')

args = sys.argv[1:]

new_args_length = 0
for i in range(0, len(args)):
    arg = args[i]
    if not arg.startswith("-"):
        args[new_args_length] = arg
        new_args_length += 1
    elif arg == "--keep-stage":
        genesis.global_keep_stage = True
    elif arg == "--verbose":
        log.verbose_enabled = True
    else:
        sys.exit("Error: unknown option '{}'".format(arg))

args = args[:new_args_length]

if len(args) == 0:
    usage()
    sys.exit(1)

command = args[0]
args = args[1:]

def enforce_args(command, expected, actual):
    if len(expected) != len(actual):
        if len(actual) == 0:
            sys.exit("Usage: {} {}".format(command, " ".join(expected)))
        sys.exit("Error: the '{}' command requires {} {} ({}) but got {}".format(
            command, len(expected), "arg" if (len(expected) == 1) else "args", " ".join(expected), len(args)))

def ca_add(path, hash, name):
    finalout = genesis.make_ca_path(hash, name)
    if os.path.exists(finalout):
        log.log("this path is already stored")
    else:
        tmpout = finalout + ".tmpout"
        if os.path.exists(tmpout):
            sys.exit("Error: need to handle case when tmpout '{}' already exists".format(tmpout))
        log.log("copying path to temporary location '{}'".format(tmpout))
        if path_type == genesis.PathType.FILE:
            shutil.copy2(path, tmpout)
        else:
            log.copytree(path, tmpout, symlinks=True)
        os.rename(tmpout, finalout)
    log.flush()
    print(finalout)

if command == "list" or command == "l":
    obj_set = load_packages()
    if not obj_set:
        log.log("Error: genesispkgs.py does not exist")
        sys.exit(1)
    for name,gen_obj in sorted(obj_set.map.items()):
        print(name)
    print("--------------------------------------------------------------------------------")
    print("Package Aliases")
    print("--------------------------------------------------------------------------------")
    for alias,name in sorted(obj_set.aliasmap.items()):
        print("{} > {}".format(alias, name))
    '''
    print("--------------------------------------------------------------------------------")
    print("Package Variation Sets")
    print("--------------------------------------------------------------------------------")
    for variation_set in obj_set.variation_sets.values():
        print("{}".format(variation_set.name))
        for template_args, gen_obj in variation_set.variation_objects:
            print(" {}".format(gen_obj.get_hash_name()))
            print("   {}".format(template_args))
    '''
    print("--------------------------------------------------------------------------------")
    print("Package Variation Sets")
    print("--------------------------------------------------------------------------------")
    for variation_set in obj_set.variation_sets.values():
        if len(variation_set.variation_objects) == 0:
            print("{}: no variation objects".format(variation_set.name))
            continue
        print("--- {} ---".format(variation_set.name))
        first_template_args,_ = variation_set.variation_objects[0]
        column_maxes = [0] * len(first_template_args)
        for args,obj in variation_set.variation_objects:
            print("{}".format(obj.get_hash_name()))
            for attr in first_template_args:
                if attr == "name":
                    continue
                print("  {} = {}".format(attr, args[attr]))


elif command == "add-build" or command == "ab":
    if len(args) == 0:
        log.log("Error: 'add-build' requires one or more package names")
        sys.exit(1)
    obj_set = load_packages()
    if not obj_set:
        log.log("Error: genesispkgs.py does not exist")
        sys.exit(1)
    gen_objs = []
    for name in args:
        gen_obj = obj_set.try_resolve(name)
        if not gen_obj:
            sys.exit("Error: package '{}' does not exist".format(name))
        gen_objs.append(gen_obj)
    generate_local_obj_files(obj_set)
    for gen_obj in gen_objs:
        local_obj_path = make_local_obj_filename(gen_obj)
        obj_path = genesis.add_gen_obj_from_file(local_obj_path)
        out_path = genesis.build(obj_path)
        log.flush()
        print(out_path)
elif command == "make-env":
    if len(args) == 0:
        log.log("Error: 'make-env' requires one or more package names")
        sys.exit(1)
    obj_set = load_packages()
    if not obj_set:
        log.log("Error: genesispkgs.py does not exist")
        sys.exit(1)
    gen_objs = []
    for name in args:
        gen_obj = obj_set.try_resolve(name)
        if not gen_obj:
            sys.exit("Error: package '{}' does not exist".format(name))
        gen_objs.append(gen_obj)
    generate_local_obj_files(obj_set)
    make_env_args = []
    for gen_obj in gen_objs:
        local_obj_path = make_local_obj_filename(gen_obj)
        obj_path = genesis.add_gen_obj_from_file(local_obj_path)
        make_env_args.append(genesis.build(obj_path))
    out_path = genesis.make_env(make_env_args)
    log.flush()
    print(out_path)
elif command == "add-build-obj":
    if len(args) == 0:
        log.log("Error: 'add-build-obj' requires one or more genesis object files")
        sys.exit(1)
    for path in args:
        gen_path = genesis.add_gen_obj_from_file(path)
        out_path = genesis.build(gen_path)
        log.flush()
        print(out_path)
elif command == "add-obj":
    if len(args) == 0:
        log.log("Error: 'add-obj' requires one or more genesis object files")
        sys.exit(1)
    for path in args:
        gen_path = genesis.add_gen_obj_from_file(path)
        log.flush()
        print(gen_path)
elif command == "make-env-obj":
    if len(args) == 0:
        sys.exit("Error: need one or more packages")
    out_path = genesis.make_env(args)
    log.flush()
    print(out_path)
elif command == "store":
    enforce_args(command, ["<path>"], args)
    path = args[0]
    path_type, hash = genesis.hash_path(path)
    abspath = os.path.abspath(path)
    basename = os.path.basename(abspath)
    ca_add(path, hash, basename)
elif command == "store-hashed":
    enforce_args(command, ["<path>"], args)
    path = args[0]
    path_type, actual_hash = genesis.hash_path(path)
    abspath = os.path.abspath(path)
    basename = os.path.basename(abspath)
    hash_from_filename, name = genesis.split_hash_name(basename)
    if actual_hash != hash_from_filename:
        log.log("Error: filename has incorrect hash, actual hash is:")
        log.log(actual_hash)
        sys.exit(1)
    ca_add(path, actual_hash, name)
elif command == "get-obj-local-path":
    enforce_args(command, ["<name>"], args)
    name = args[0]
    obj_set = load_packages()
    if not obj_set:
        log.log("Error: genesispkgs.py does not exist")
        sys.exit(1)
    gen_obj = obj_set.resolve(name)
    print(make_local_obj_filename(gen_obj))
elif command == "generate-obj-files":
    enforce_args(command, [], args)
    obj_set = load_packages()
    if not obj_set:
        log.log("Error: genesispkgs.py does not exist")
        sys.exit(1)
    generate_local_obj_files(obj_set)
elif command == "show":
    enforce_args(command, ['<package>'], args)
    obj_set = load_packages()
    if not obj_set:
        log.log("Error: genesispkgs.py does not exist")
        sys.exit(1)
    package = args[0]
    obj = obj_set.resolve(package)
    log.flush()
    print(obj.make_pretty_hashdata())
elif command == "install-old":
    enforce_args(command, ["<gen-file>"], args)
    file = args[0]
    gen_obj = genesis.GenesisObject.from_file(file)
    store_path = gen_obj.get_gen_store_path()
    shutil.copyfile(file, store_path)
    print(store_path)
elif command == "build":
    enforce_args(command, ["<gen-file-store-path>"], args)
    file = args[0]
    out_path = genesis.build(file)
    log.flush()
    print(out_path)
elif command == "hash":
    enforce_args(command, ["<path>"], args)
    path = args[0]
    if path == "-":
        hasher = genesis.GenesisHasher()
        hasher.start_file_content_hash()
        while True:
            data = sys.stdin.buffer.read()
            if len(data) == 0:
                break
            hasher.update(data)
        print(hasher.finish())
    else:
        path_type, hash = genesis.hash_path(path)
        print(hash)
elif command == "out-hash":
    enforce_args(command, ["<gen-file>"], args)
    file = args[0]
    gen_obj = genesis.GenesisObject.from_file(file)
    print(gen_obj.get_hash())
elif command == "dump-hash-data":
    enforce_args(command, ["<gen-file>"], args)
    file = args[0]
    gen_obj = genesis.GenesisObject.from_file(file)
    # don't use print, we don't want to add a newline to our hash data
    sys.stdout.write(gen_obj.get_hashdata())
elif command == "setup-store":
    root_path = genesis.get_root_path()
    paths = [
        root_path,
        genesis.get_ca_path(),
        genesis.get_ca_stage_path(),
        genesis.get_obj_path(),
        genesis.get_obj_stage_path(),
        genesis.get_stage_path(),
        genesis.get_proxy_path(),
    ]
    paths_made = 0
    for path in paths:
        if not os.path.exists(path):
            log.mkdir(path)
            paths_made += 1

    if paths_made == 0:
        log.log("the store is already setup at {}".format(root_path))
    else:
        log.log("made {} paths".format(paths_made))
elif command == "net-show":
    proxy_settings = download.ProxySettings.init()
    proxies = proxy_settings.proxies
    if len(proxies) == 0:
        print("no proxies")
    else:
        print("{} proxies:".format(len(proxies)))
        for proto,proxy in proxies.items():
            print("{:5} '{}'".format(proto, proxy))
elif command == "clean":
    def clean(dir, pattern):
        for entry_base in glob.glob(os.path.join(dir, pattern)):
            entry = os.path.join(dir, entry_base)
            if os.path.isfile(entry):
                log.rmfile(entry)
            else:
                log.rmtree(os.path.join(dir, entry))
    log.verbose_enabled = True
    clean(genesis.get_stage_path(), "*")
    clean(genesis.get_ca_stage_path(), "*")
    clean(genesis.get_obj_stage_path(), "*")
else:
    sys.exit("Error: unknown command '{}'".format(command))
