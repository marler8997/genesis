import os
import sys

script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, script_dir)

import log
import genesis


'''
Adds all the variations to `list` that can be generated by passing every combination of options
to the given `template` function.
'''
def add_variations(list, template, options, **kwargs):
    if len(options) == 0:
        result = template(**kwargs)
        list.append((kwargs, result))
    else:
        key,values = options.popitem()
        for value in values:
            kwargs[key] = value
            add_variations(list, template, options, **kwargs)
        options[key] = values

def template_args_match(criteria, instance):
    for key,value in criteria.items():
        instance_value = instance.get(key)
        if not instance_value:
            return False
        if value != instance_value:
            return False
    return True

class PackageVariationSet:
    def __init__(self, obj_set, name, template):
        self.obj_set = obj_set
        self.name = name
        self.template = template
        self.raw_variations = []
        self.variation_objects = []
    def add(self, options):
        current_size = len(self.raw_variations)
        add_variations(self.raw_variations, self.template, options, name=self.name)
        for i in range(current_size, len(self.raw_variations)):
            template_args, raw_variation = self.raw_variations[i]
            gen_obj = genesis.GenesisObject.from_data(self.name, raw_variation)
            self.obj_set.add_gen_obj(gen_obj)
            self.variation_objects.append((template_args, gen_obj))
        return self

class GenObjSet:
    def __init__(self):
        self.hash_name_map = {}
        # rename self.map to self.custom_name_map
        self.map = {}
        # remove aliasmap and combine it with self.map/self.custom_name_map
        self.aliasmap = {}
        self.variation_sets = {}

    def add_gen_obj(self, gen_obj):
        hash_name = gen_obj.get_hash_name()
        existing = self.hash_name_map.get(hash_name)
        if existing:
            raise Exception("genesis object '{}' added multiple times".format(hash_name))
        self.hash_name_map[hash_name] = gen_obj

    def try_get(self, name):
        return self.map.get(name)
    def get(self, name):
        obj = self.map.get(name)
        if not obj:
            log.flushall()
            raise Exception("Error: undefined package '{}'".format(name))
        return obj
    def alias_to_hash_name(self, alias):
        return self.resolve(alias).get_hash_name()

    def try_resolve(self, name):
        result = self.map.get(name)
        if result:
            return result
        result = self.aliasmap.get(name)
        if result:
            # if it's an alias, the resolved name must exist
            return self.resolve(result)
        result = self.hash_name_map.get(name)
        if result:
            return result
        result = self.variation_sets.get(name)
        if result:
            if len(result.variation_objects) == 1:
                return result.variation_objects[0][1]
        return None
    def resolve(self, name):
        result = self.try_resolve(name)
        if not result:
            log.flushall()
            raise Exception("Error: undefined package/alias '{}'".format(name))
        return result
    def resolve_name(self, name):
        return self.resolve(name).name
    def resolve_hash_name(self, name):
        return self.resolve(name).get_hash_name()

    def setalias(self, alias, name):
        existing = self.try_resolve(alias)
        if existing != None:
            raise Exception("Error: multiple packages with name/alias '{}':".format(alias))
        self.aliasmap[alias] = name

        removed_host_alias = try_get_package_host_alias(alias)
        if removed_host_alias:
            self.setalias(removed_host_alias, name)

    def resolve_ins(self, name_for_error, gen_obj):
        in_names = gen_obj['in']
        in_resolved = []
        for in_name in in_names:
            in_gen_obj = self.try_get(in_name)
            if not in_gen_obj:
                sys.exit("Error: cannot create genesis object '{}' because 'in' entry '{}' can't be found".format(
                    name_for_error, in_name))
            in_resolved.append(genesis.make_hash_name(in_gen_obj.get_hash(), in_name))
        gen_obj_resolved = gen_obj.copy()
        gen_obj_resolved['in'] = in_resolved
        return gen_obj_resolved

    def get_variation(self, name, **kwargs):
        return self.get_variation_obj(name, **kwargs).get_hash_name()
    def get_variation_obj(self, name, **kwargs):
        variation_set = self.variation_sets.get(name)
        if not variation_set:
            raise Exception("unknown variation set '{}'".format(name))
        # find best match
        matches = []
        for template_args, gen_obj in variation_set.variation_objects:
            if template_args_match(kwargs, template_args):
                matches.append((template_args, gen_obj))
        if len(matches) == 0:
            log.log("Error: cannot find a variation of '{}' that matches the criteria {}".format(name, kwargs))
            log.log("There are currently {} variations:".format(len(variation_set.variation_objects)))
            for template_args, gen_obj in variation_set.variation_objects:
                log.log("{}".format(template_args))
            raise Exception("undefined variation")
        if len(matches) > 1:
            log.log("Multiple Variation matches for {} ({}) are not implemented:".format(name, len(matches)))
            for template_args, gen_obj in matches:
                log.log("{}".format(template_args))
            raise Exception("multiple variation matches")
        return matches[0][1]

    def add(self, name, data):
        existing = self.map.get(name)
        if existing:
            raise Exception("package '{}' already exists".format(name))

        gen_obj = genesis.GenesisObject.from_data(name, self.resolve_ins(name, data))
        # REMOVE THIS self.map field
        self.map[name] = gen_obj
        self.add_gen_obj(gen_obj)

        removed_host_alias = try_get_package_host_alias(name)
        if removed_host_alias:
            self.setalias(removed_host_alias, name)

        return gen_obj
    def add_no_resolve(self, name, data):
        existing = self.map.get(name)
        if existing:
            raise Exception("package '{}' already exists".format(name))

        gen_obj = genesis.GenesisObject.from_data(name, data)
        # REMOVE THIS self.map field
        self.map[name] = gen_obj
        self.add_gen_obj(gen_obj)

        removed_host_alias = try_get_package_host_alias(name)
        if removed_host_alias:
            self.setalias(removed_host_alias, name)

        return gen_obj

    def add_or_get_variation_set(self, name, template):
        existing = self.variation_sets.get(name)
        if existing:
            if template != existing.template:
                raise Exception("variation set '{}' added with different templates".format(name))
            return existing
        variation_set = PackageVariationSet(self, name, template)
        self.variation_sets[name] = variation_set
        return variation_set
    def add_variation_set(self, name, template):
        existing = self.variation_sets.get(name)
        if existing:
            raise Exception("variation set '{}' already exists".format(name))
        variation_set = PackageVariationSet(self, name, template)
        self.variation_sets[name] = variation_set
        return variation_set

    def add_all_to_global_genesis_obj_dir(self):
        for _,gen_obj in self.hash_name_map.items():
            if not os.path.exists(gen_obj.get_obj_path()):
                log.verbose("adding genesis object '{}'".format(gen_obj.name))
                genesis.write_gen_obj(gen_obj)


def try_get_package_host_alias(name):
    # TODO: get the actual host platform
    return try_get_package_host_alias_impl('-linux64', name)

CROSS_PREFIX = '-cross'
CROSS_PREFIX_LEN = len(CROSS_PREFIX)
def try_get_package_host_alias_impl(host_platform_part, name):
    start = 0
    while True:
        idx = name.find(host_platform_part, start)
        if idx == -1:
            return None
        end = idx + len(host_platform_part)
        if end < len(name) and name[end] != '-':
            start = end
            continue
        if idx >= CROSS_PREFIX_LEN and name.startswith(CROSS_PREFIX, idx - CROSS_PREFIX_LEN):
            start = end
            continue
        return name[0:idx] + name[idx+len(host_platform_part):]
